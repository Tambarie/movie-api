// Code generated by MockGen. DO NOT EDIT.
// Source: internal/ports/movieService.go

// Package ports is a generated GoMock package.
package ports

import (
	reflect "reflect"

	movie "github.com/Tambarie/movie-api/internal/core/domain/movie"
	gomock "github.com/golang/mock/gomock"
)

// MockMovieService is a mock of MovieService interface.
type MockMovieService struct {
	ctrl     *gomock.Controller
	recorder *MockMovieServiceMockRecorder
}

// MockMovieServiceMockRecorder is the mock recorder for MockMovieService.
type MockMovieServiceMockRecorder struct {
	mock *MockMovieService
}

// NewMockMovieService creates a new mock instance.
func NewMockMovieService(ctrl *gomock.Controller) *MockMovieService {
	mock := &MockMovieService{ctrl: ctrl}
	mock.recorder = &MockMovieServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMovieService) EXPECT() *MockMovieServiceMockRecorder {
	return m.recorder
}

// CountComments mocks base method.
func (m *MockMovieService) CountComments(movieId int) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountComments", movieId)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountComments indicates an expected call of CountComments.
func (mr *MockMovieServiceMockRecorder) CountComments(movieId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountComments", reflect.TypeOf((*MockMovieService)(nil).CountComments), movieId)
}

// GetComments mocks base method.
func (m *MockMovieService) GetComments(movieId int) (*[]movie.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComments", movieId)
	ret0, _ := ret[0].(*[]movie.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetComments indicates an expected call of GetComments.
func (mr *MockMovieServiceMockRecorder) GetComments(movieId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComments", reflect.TypeOf((*MockMovieService)(nil).GetComments), movieId)
}

// SaveComments mocks base method.
func (m *MockMovieService) SaveComments(comment *movie.Comment) (*movie.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveComments", comment)
	ret0, _ := ret[0].(*movie.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveComments indicates an expected call of SaveComments.
func (mr *MockMovieServiceMockRecorder) SaveComments(comment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveComments", reflect.TypeOf((*MockMovieService)(nil).SaveComments), comment)
}

// MockRedisService is a mock of RedisService interface.
type MockRedisService struct {
	ctrl     *gomock.Controller
	recorder *MockRedisServiceMockRecorder
}

// MockRedisServiceMockRecorder is the mock recorder for MockRedisService.
type MockRedisServiceMockRecorder struct {
	mock *MockRedisService
}

// NewMockRedisService creates a new mock instance.
func NewMockRedisService(ctrl *gomock.Controller) *MockRedisService {
	mock := &MockRedisService{ctrl: ctrl}
	mock.recorder = &MockRedisServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRedisService) EXPECT() *MockRedisServiceMockRecorder {
	return m.recorder
}

// GetMovie mocks base method.
func (m *MockRedisService) GetMovie(key string) *[]movie.Movie {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMovie", key)
	ret0, _ := ret[0].(*[]movie.Movie)
	return ret0
}

// GetMovie indicates an expected call of GetMovie.
func (mr *MockRedisServiceMockRecorder) GetMovie(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMovie", reflect.TypeOf((*MockRedisService)(nil).GetMovie), key)
}

// GetMovieCharactersInRedis mocks base method.
func (m *MockRedisService) GetMovieCharactersInRedis(key string) []movie.Character {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMovieCharactersInRedis", key)
	ret0, _ := ret[0].([]movie.Character)
	return ret0
}

// GetMovieCharactersInRedis indicates an expected call of GetMovieCharactersInRedis.
func (mr *MockRedisServiceMockRecorder) GetMovieCharactersInRedis(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMovieCharactersInRedis", reflect.TypeOf((*MockRedisService)(nil).GetMovieCharactersInRedis), key)
}

// SetMovie mocks base method.
func (m *MockRedisService) SetMovie(key string, value *[]movie.Movie) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetMovie", key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetMovie indicates an expected call of SetMovie.
func (mr *MockRedisServiceMockRecorder) SetMovie(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMovie", reflect.TypeOf((*MockRedisService)(nil).SetMovie), key, value)
}

// SetMovieCharactersInRedis mocks base method.
func (m *MockRedisService) SetMovieCharactersInRedis(key string, value []movie.Character) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetMovieCharactersInRedis", key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetMovieCharactersInRedis indicates an expected call of SetMovieCharactersInRedis.
func (mr *MockRedisServiceMockRecorder) SetMovieCharactersInRedis(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMovieCharactersInRedis", reflect.TypeOf((*MockRedisService)(nil).SetMovieCharactersInRedis), key, value)
}
