// Code generated by MockGen. DO NOT EDIT.
// Source: internal/ports/movieRepository.go

// Package ports is a generated GoMock package.
package ports

import (
	reflect "reflect"

	movie "github.com/Tambarie/movie-api/internal/core/domain/movie"
	gomock "github.com/golang/mock/gomock"
)

// MockMovieRepository is a mock of MovieRepository interface.
type MockMovieRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMovieRepositoryMockRecorder
}

// MockMovieRepositoryMockRecorder is the mock recorder for MockMovieRepository.
type MockMovieRepositoryMockRecorder struct {
	mock *MockMovieRepository
}

// NewMockMovieRepository creates a new mock instance.
func NewMockMovieRepository(ctrl *gomock.Controller) *MockMovieRepository {
	mock := &MockMovieRepository{ctrl: ctrl}
	mock.recorder = &MockMovieRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMovieRepository) EXPECT() *MockMovieRepositoryMockRecorder {
	return m.recorder
}

// CountComments mocks base method.
func (m *MockMovieRepository) CountComments(movieId int) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountComments", movieId)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountComments indicates an expected call of CountComments.
func (mr *MockMovieRepositoryMockRecorder) CountComments(movieId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountComments", reflect.TypeOf((*MockMovieRepository)(nil).CountComments), movieId)
}

// GetComments mocks base method.
func (m *MockMovieRepository) GetComments(movieId int) (*[]movie.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComments", movieId)
	ret0, _ := ret[0].(*[]movie.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetComments indicates an expected call of GetComments.
func (mr *MockMovieRepositoryMockRecorder) GetComments(movieId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComments", reflect.TypeOf((*MockMovieRepository)(nil).GetComments), movieId)
}

// SaveComments mocks base method.
func (m *MockMovieRepository) SaveComments(comment *movie.Comment) (*movie.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveComments", comment)
	ret0, _ := ret[0].(*movie.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveComments indicates an expected call of SaveComments.
func (mr *MockMovieRepositoryMockRecorder) SaveComments(comment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveComments", reflect.TypeOf((*MockMovieRepository)(nil).SaveComments), comment)
}

// MockRedisRepository is a mock of RedisRepository interface.
type MockRedisRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRedisRepositoryMockRecorder
}

// MockRedisRepositoryMockRecorder is the mock recorder for MockRedisRepository.
type MockRedisRepositoryMockRecorder struct {
	mock *MockRedisRepository
}

// NewMockRedisRepository creates a new mock instance.
func NewMockRedisRepository(ctrl *gomock.Controller) *MockRedisRepository {
	mock := &MockRedisRepository{ctrl: ctrl}
	mock.recorder = &MockRedisRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRedisRepository) EXPECT() *MockRedisRepositoryMockRecorder {
	return m.recorder
}

// GetMovie mocks base method.
func (m *MockRedisRepository) GetMovie(key string) *[]movie.Movie {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMovie", key)
	ret0, _ := ret[0].(*[]movie.Movie)
	return ret0
}

// GetMovie indicates an expected call of GetMovie.
func (mr *MockRedisRepositoryMockRecorder) GetMovie(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMovie", reflect.TypeOf((*MockRedisRepository)(nil).GetMovie), key)
}

// GetMovieCharactersInRedis mocks base method.
func (m *MockRedisRepository) GetMovieCharactersInRedis(key string) []movie.Character {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMovieCharactersInRedis", key)
	ret0, _ := ret[0].([]movie.Character)
	return ret0
}

// GetMovieCharactersInRedis indicates an expected call of GetMovieCharactersInRedis.
func (mr *MockRedisRepositoryMockRecorder) GetMovieCharactersInRedis(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMovieCharactersInRedis", reflect.TypeOf((*MockRedisRepository)(nil).GetMovieCharactersInRedis), key)
}

// SetMovie mocks base method.
func (m *MockRedisRepository) SetMovie(key string, value *[]movie.Movie) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetMovie", key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetMovie indicates an expected call of SetMovie.
func (mr *MockRedisRepositoryMockRecorder) SetMovie(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMovie", reflect.TypeOf((*MockRedisRepository)(nil).SetMovie), key, value)
}

// SetMovieCharactersInRedis mocks base method.
func (m *MockRedisRepository) SetMovieCharactersInRedis(key string, value []movie.Character) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetMovieCharactersInRedis", key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetMovieCharactersInRedis indicates an expected call of SetMovieCharactersInRedis.
func (mr *MockRedisRepositoryMockRecorder) SetMovieCharactersInRedis(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMovieCharactersInRedis", reflect.TypeOf((*MockRedisRepository)(nil).SetMovieCharactersInRedis), key, value)
}
